package com.leetcode;

import java.util.*;

public class FlowerBed {
    public static void main(String[] args) {
//        System.out.println(new FlowerBed().canPlaceFlowers(new int[] {1,0,0,0,1}, 1));
//        System.out.println(new FlowerBed().canPlaceFlowers(new int[] {1,0,0,0,1}, 2));
//        System.out.println(new FlowerBed().canPlaceFlowers(new int[] {1,0,0,0,0,1}, 2));
//        System.out.println(new FlowerBed().canPlaceFlowers(new int[] {0,0,1,0,1}, 1));
//        System.out.println(new FlowerBed().canPlaceFlowers(new int[] {1,0,0,0,1,0,0}, 2));
//        System.out.println(new FlowerBed().canPlaceFlowers(new int[] {0}, 1));
//        System.out.println(new FlowerBed().canPlaceFlowers(new int[] {0,1,0}, 1));
//        System.out.println(Arrays.toString(new FlowerBed().findErrorNums(new int[] {1,2,2,4})));
//        System.out.println(Arrays.toString(new FlowerBed().findErrorNums(new int[] {1,1})));
//        System.out.println(Arrays.toString(new FlowerBed().findErrorNums(new int[] {2, 2})));
//        System.out.println(Arrays.toString(new FlowerBed().findErrorNums(new int[] {1,3,3})));
//        System.out.println(new FlowerBed().lemonadeChange(new int[] {5,5,5,10,20}));
//        System.out.println(new FlowerBed().lemonadeChange(new int[] {5,5,10,10,20}));
//        System.out.println(new FlowerBed().lemonadeChange(new int[] {5,5,10,20,5,5,5,5,5,5,5,5,5,10,5,5,20,5,20,5}));
//        System.out.println(new FlowerBed().lemonadeChange(new int[] {5,5,5,10,5,5,10,20,20,20}));
//        System.out.println(new FlowerBed().lemonadeChange(new int[] {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,20,5,20,5,5,5,10,20,5,5,10,5,10,5,10,5,5,5,20,10,5,5,5,5,5,5,20,5,10,10,20,5,20,5,5,10,5,20,5,5,5,10,5,10,10,10,10,10,5,20,5,20,20,5,5,5,5,5,5,5,20,10,5,5,5,20,5,5,5,20,5,5,5,5,20,20,5,5,20,20,5,5,5,20,5,5,10,10,10,5,20,20,5,20,5,5,10,10,20,20,5,5,20,10,5,5,10,20,5,20,5,5,5,20,5,20,5,5,5,5,5,5,5,20,20,10,5,5,5,5,20,5,20,20,5,10,10,20,20,20,5,5,5,5,10,10,5,5,20,20,10,5,5,10,20,5,5,5,5,5,20,10,20,5,5,5,10,5,5,5,10,5,5,10,10,20,5,5,10,10,10,10,5,5,5,5,20,10,5,20,10,5,5,5,20,10,5,5,5,5,5,5,5,10,10,10,5,20,5,5,5,5,20,5,10,10,20,5,5,5,5,10,5,5,5,10,10,5,5,5,5,5,10,5,5,10,20,20,5,10,5,5,5,10,5,5,5,20,5,5,5,20,5,5,5,5,5,10,10,5,5,5,5,5,10,10,5,5,5,20,5,5,5,5,5,5,5,5,10,5,10,5,20,5,20,20,5,20,5,10,20,5,5,5,5,5,5,5,10,5,20,5,10,5,10,5,5,5,5,20,10,5,20,10,5,10,5,5,20,10,20,10,5,5,5,5,5,5,20,5,10,10,20,5,5,10,5,5,5,5,20,20,5,10,5,5,20,5,10,5,20,5,5,5,20,5,5,5,10,5,10,20,20,10,5,20,20,10,10,20,5,20,5,5,10,5,5,10,5,5,20,5,5,5,5,5,5,5,5,5,5,20,5,5,5,20,5,10,5,10,10,20,5,5,5,20,5,5,20,5,20,5,5,5,10,5,5,10,20,5,5,10,10,5,5,5,20,20,20,5,5,5,20,10,20,20,10,5,5,5,5,10,5,5,5,5,5,10,5,5,5,5,5,5,5,20,5,5,10,20,5,5,5,5,10,5,5,5,20,5,5,20,20,10,20,10,5,5,5,5,20,20,10,10,20,20,5,5,5,5,5,5,5,5,10,5,5,20,5,5,5,20,5,5,10,10,5,5,5,5,10,5,5,5,5,10,5,10,5,20,5,5,5,10,5,20,5,20,5,5,5,5,10,5,20,5,10,5,5,5,10,5,10,10,5,5,10,20,5,5,5,10,5,5,5,5,10,10,5,10,10,20,5,10,5,5,5,5,5,10,20,20,5,5,5,5,10,10,5,20,5,5,10,5,20,5,5,5,5,5,10,10,5,5,5,5,10,5,5,20,5,5,5,5,5,5,20,5,5,10,5,5,5,10,5,5,5,5,20,5,5,20,10,20,20,20,5,10,5,5,5,5,20,5,5,10,10,10,5,5,20,5,5,20,20,5,5,5,20,5,5,5,5,20,5,5,10,5,20,10,5,5,5,20,5,10,10,5,5,5,20,5,5,5,5,5,5,10,5,5,10,10,5,20,10,20,5,5,5,5,5,20,5,5,20,5,5,5,5,20,5,5,20,10,20,10,5,20,5,5,5,5,5,5,5,5,20,5,20,5,10,5,10,5,5,5,10,5,10,5,5,5,5,20,10,10,5,10,5,5,5,20,20,5,5,5,5,5,20,5,5,10,20,5,5,5,5,5,5,5,5,5,5,10,20,5,10,5,5,5,10,5,5,5,5,10,10,10,10,5,10,5,20,5,5,20,10,5,5,5,5,5,5,5,5,5,20,5,5,10,10,5,10,5,10,5,5,20,20,5,10,5,10,5,5,20,10,5,20,5,20,20,5,10,10,10,10,20,10,5,5,5,20,5,10,20,5,5,5,5,10,5,20,20,5,20,5,10,20,5,5,5,5,5,5,10,5,5,5,20,5,5,5,5,10,5,20,20,20,5,5,20,20,5,5,5,20,5,5,20,5,5,5,5,5,5,5,5,10,20,5,5,10,10,5,10,10,20,5,5,5,5,20,20,5,10,10,5,5,5,5,5,20,5,5,5,10,20,5,5,10,20,5,20,5,20,10,5,20,20,5,20,5,5,10,20,5,5,20,10,5,10,5,5,5,5,5,5,5,10,10,20,10,20,10,5,5,20,5,10,5,10,10,5,5,5,5,5,5,5,20,10,20,20,10,10,20,5,5,20,5,20,5,10,5,10,20,20,10,20,5,5,5,5,5,5,5,20,5,10,10,10,5,20,20,10,5,20,5,5,5,5,10,10,5,5,5,20,20,5,10,5,5,5,10,5,10,20,20,5,20,5,5,5,5,20,20,5,20,10,20,5,5,5,20,5,5,20,10,5,10,10,10,5,5,5,5,5,5,10,5,5,20,20,5,10,5,5,5,5,5,20,5,5,10,5,5,5,5,10,10,10,10,5,20,5,5,20,10,5,5,20,5,5,5,5,5,10,5,5,5,5,10,5,5,5,10,5,5,5,5,20,10,5,5,5,5,5,20,5,20,5,5,5,5,5,10,5,5,20,20,5,5,5,5,10,20,10,5,10,10,5,10,5,20,5,5,20,20,5,10,5,5,5,5,20,10,5,5,5,20,5,10,5,5,10,5,5,10,5,5,5,10,5,5,5,20,5,10,5,5,5,5,5,20,20,5,5,5,5,5,5,20,5,5,5,5,5,20,5,5,5,10,10,10,5,10,20,5,20,20,5,5,5,5,10,5,5,5,10,10,5,5,5,10,5,20,5,5,5,5,5,5,5,5,5,10,5,5,5,10,5,5,10,5,5,5,5,5,5,20,5,5,5,5,5,10,5,5,5,5,10,5,10,5,20,20,20,10,20,5,5,5,5,5,5,5,5,20,20,20,5,10,20,20,20,20,5,5,20,10,20,5,5,5,5,5,5,5,5,20,5,5,5,10,10,5,5,20,20,5,5,5,5,5,5,20,5,5,5,20,5,5,5,5,10,20,5,20,20,20,10,5,5,5,5,5,5,5,20,20,10,5,10,5,5,5,5,5,10,5,20,5,10,5,20,20,5,5,20,5,20,5,10,5,5,5,20,20,10,5,10,10,20,5,5,5,5,5,5,10,5,20,5,5,5,5,20,5,5,5,5,20,10,5,5,20,10,5,5,5,5,10,10,5,5,5,5,20,5,5,5,10,5,5,10,5,5,5,5,5,5,20,10,5,20,5,10,5,5,5,5,5,5,5,5,10,5,5,20,5,5,5,20,20,5,20,10,10,5,5,10,10,5,5,5,20,5,5,5,5,10,5,5,5,5,5,20,10,5,20,5,5,5,5,5,20,5,5,5,5,5,5,5,5,5,5,20,5,5,5,5,10,10,10,5,5,5,10,20,5,5,5,5,10,20,20,20,5,10,10,20,20,5,5,5,5,5,5,5,5,10,20,5,5,5,5,10,10,5,20,5,5,5,5,5,20,5,10,5,5,5,20,5,5,5,5,20,5,10,20,5,5,5,5,5,5,10,5,5,5,10,20,5,10,10,5,5,10,5,10,10,5,5,5,5,10,5,5,5,5,20,5,10,5,5,5,5,5,10,20,5,10,10,20,5,10,20,20,20,5,5,20,5,20,10,20,10,5,10,5,5,10,5,5,5,5,5,5,10,10,5,5,5,10,5,20,20,5,5,20,5,10,5,5,5,10,20,5,10,5,5,5,5,20,5,5,5,5,5,5,10,5,5,10,5,5,5,20,20,5,5,5,5,5,5,5,5,5,5,20,10,10,20,10,20,20,5,5,10,10,5,5,10,5,20,5,20,10,5,10,5,5,20,5,5,5,5,5,5,10,10,5,20,10,5,20,20,5,20,5,10,5,20,5,10,5,5,5,5,5,5,5,20,10,20,5,5,5,5,20,10,5,5,5,10,5,5,5,20,5,5,5,5,10,5,5,10,5,20,10,5,10,5,5,5,5,5,10,10,20,5,5,20,5,5,20,5,5,5,10,20,5,5,5,5,5,5,10,10,5,10,5,5,5,5,20,10,5,20,5,10,5,20,20,10,5,5,5,5,20,5,10,5,20,5,5,5,5,5,10,5,20,10,20,20,10,5,10,10,5,20,20,5,20,20,5,5,5,20,5,10,5,5,5,20,5,5,5,5,5,5,10,20,10,5,5,5,5,20,5,5,5,5,10,5,20,5,5,10,5,10,10,5,5,5,5,10,5,5,5,5,5,10,5,5,10,5,5,20,20,10,5,10,20,10,10,5,20,5,20,10,5,5,10,5,5,5,20,5,20,5,5,5,5,5,5,5,5,5,5,20,20,10,10,5,5,20,5,10,5,10,5,5,20,20,20,20,10,20,5,5,5,10,5,10,5,5,5,20,5,10,20,20,5,5,10,5,5,20,5,5,10,5,5,5,5,5,5,5,10,5,10,10,20,5,5,10,10,10,10,20,20,10,10,5,5,5,5,10,10,5,10,5,10,5,5,10,5,20,20,5,10,5,5,5,5,5,5,10,10,10,5,5,5,5,5,5,20,5,5,10,5,20,5,5,20,20,5,20,20,5,5,20,20,5,5,5,10,10,5,5,5,5,5,5,5,5,20,5,5,20,10,5,20,10,20,5,20,10,5,5,5,5,10,20,10,20,10,5,5,5,20,5,20,20,5,5,20,5,5,5,5,5,10,5,5,5,5,10,20,10,5,5,10,20,10,10,10,5,5,5,10,20,20,10,5,5,20,5,5,5,10,10,5,5,10,5,20,20,5,5,5,10,5,5,5,20,5,10,5,10,5,5,5,10,20,5,5,10,10,10,20,5,20,5,20,5,5,10,5,5,10,5,5,5,5,10,5,5,20,10,5,5,10,5,5,20,5,5,20,20,10,5,5,10,5,20,20,5,5,20,20,5,10,10,20,5,20,5,5,10,5,10,5,5,5,5,5,5,5,5,5,5,5,5,20,20,10,5,10,20,20,5,20,10,10,5,5,20,10,10,5,5,5,10,10,5,20,10,20,20,10,20,10,10,5,20,5,5,20,10,5,5,20,5,5,10,10,5,20,5,10,5,20,5,5,5,5,20,5,20,20,10,20,20,5,5,5,5,5,20,5,5,10,5,5,10,20,5,5,10,10,20,5,5,5,20,5,5,20,10,5,5,5,20,5,5,10,10,10,5,10,5,10,5,5,20,5,5,5,5,10,5,5,10,5,20,5,5,5,10,20,5,10,20,20,10,10,10,20,5,5,5,5,5,20,10,5,5,5,5,5,5,20,20,5,5,5,5,5,10,5,20,5,20,20,5,20,20,5,10,5,5,10,5,5,10,5,5,10,20,5,5,10,10,5,5,5,5,5,5,20,5,5,20,10,5,5,5,5,5,20,10,5,5,5,5,5,5,10,5,20,5,20,5,20,5,5,5,5,5,5,5,10,20,5,5,10,5,5,5,5,20,5,5,10,10,5,5,5,10,5,5,20,5,5,5,5,5,5,20,5,5,10,5,5,5,5,20,5,20,5,5,20,5,5,10,20,5,20,5,5,20,5,5,10,10,10,20,5,5,10,5,20,5,5,10,20,5,5,10,5,10,5,5,20,10,20,5,5,20,20,5,20,10,10,5,5,10,5,5,5,5,20,5,5,5,5,10,5,20,20,5,5,20,20,5,20,5,5,5,5,20,5,10,10,5,5,10,5,5,5,5,10,20,10,5,5,5,5,5,5,20,5,10,5,5,5,5,20,20,5,10,5,5,10,10,5,10,5,10,5,5,5,20,20,5,5,5,10,5,20,10,5,10,5,5,5,5,10,5,5,5,5,5,5,5,5,20,5,10,10,20,5,5,5,20,5,5,5,5,5,20,5,20,5,5,20,10,5,20,5,5,10,10,20,20,5,5,10,20,20,5,10,20,10,20,5,5,5,5,20,5,20,5,5,20,20,10,20,5,5,5,10,20,5,5,5,20,5,5,5,5,5,5,20,5,5,5,20,5,5,5,20,20,5,5,5,20,5,20,5,10,10,5,10,5,10,10,20,5,20,20,5,10,5,5,5,5,5,10,5,10,5,5,5,5,5,5,5,20,5,5,5,5,5,20,5,5,5,5,5,20,20,5,5,5,5,5,20,20,5,5,20,5,5,5,5,10,5,5,10,20,5,5,5,20,20,10,5,5,20,5,5,5,5,5,5,5,5,5,5,20,5,5,5,20,20,20,20,20,10,5,5,5,20,5,10,10,10,5,10,10,10,5,5,20,20,5,5,5,5,10,5,5,5,20,10,5,5,5,5,5,10,20,10,20,5,5,5,10,5,20,5,10,10,5,20,10,20,5,5,5,5,5,10,20,5,5,5,5,5,5,10,20,10,20,20,5,5,10,5,5,5,20,5,20,10,10,5,5,5,5,5,20,5,5,5,5,5,5,20,5,20,5,20,5,5,5,20,5,5,5,5,20,20,20,5,5,5,10,5,10,20,5,20,5,5,5,5,10,5,5,20,5,5,5,10,5,5,5,20,10,20,5,5,20,5,10,5,5,5,10,5,5,5,10,20,20,10,5,5,5,5,20,5,20,5,5,5,20,5,5,5,5,20,5,5,20,5,5,5,5,20,20,5,10,5,5,5,5,5,5,5,5,5,20,5,10,5,20,20,20,20,10,5,10,5,20,5,5,20,10,20,5,5,5,20,5,5,5,5,10,5,5,20,5,10,5,5,10,5,20,5,10,5,20,20,5,5,20,20,5,20,5,5,5,20,5,20,5,5,5,10,5,5,5,5,5,20,5,5,5,5,5,5,10,20,20,5,5,20,20,10,5,20,5,10,20,5,5,5,5,5,5,5,5,10,20,5,5,5,5,10,5,20,5,10,5,5,20,10,5,5,5,5,5,5,5,5,5,10,5,5,5,20,5,20,10,10,10,5,5,5,5,10,10,10,5,10,5,20,20,20,20,5,5,5,20,5,5,5,20,10,5,20,5,10,20,5,5,10,20,20,10,5,5,5,5,5,5,5,5,20,20,5,5,5,20,10,10,10,5,5,5,20,5,10,5,10,20,5,10,5,5,5,20,5,5,5,5,5,5,5,20,5,10,5,5,5,10,5,20,20,5,5,5,10,5,5,5,5,10,5,5,20,5,5,10,10,5,20,10,20,10,10,5,5,5,5,5,10,5,5,5,10,5,5,20,10,20,20,20,10,20,5,5,5,5,5,5,20,5,20,20,5,5,10,10,5,5,20,5,5,5,5,20,10,20,5,5,5,5,10,5,5,5,5,20,5,10,5,5,10,5,5,5,5,5,5,5,5,5,5,10,5,10,20,10,5,20,20,5,5,20,20,10,5,5,10,5,5,10,20,20,5,20,20,10,10,5,5,5,20,20,5,5,20,20,5,5,10,5,20,5,5,20,20,10,20,5,20,5,20,20,5,5,10,10,10,10,5,5,5,10,10,10,20,5,5,5,5,5,5,5,10,10,10,5,20,5,10,10,20,5,5,5,20,5,5,5,5,5,10,5,10,5,10,5,20,20,20,5,10,5,5,10,5,5,5,20,5,10,5,10,5,5,10,5,20,5,5,10,20,5,20,5,5,20,20,5,5,20,5,5,5,5,5,5,10,10,5,10,10,5,5,5,5,20,5,5,5,5,5,20,5,5,5,5,20,10,10,5,5,5,10,5,5,20,5,5,5,5,5,5,5,20,20,20,5,20,5,5,5,10,5,5,5,5,5,10,20,5,10,10,10,5,5,20,20,5,10,5,5,5,20,20,10,5,5,5,5,20,20,5,5,5,20,5,10,5,5,5,5,5,5,10,5,5,5,5,20,10,10,5,5,5,5,5,10,5,5,5,5,5,5,5,5,20,10,5,20,5,10,5,20,5,5,5,5,20,5,5,5,5,20,20,5,10,5,20,5,20,5,20,20,5,20,5,5,5,5,10,20,5,20,5,5,5,20,10,10,5,5,5,5,5,10,5,10,5,5,5,5,20,5,5,20,20,5,5,10,5,20,10,5,10,10,10,5,20,20,5,5,5,5,5,5,20,5,5,5,20,5,10,5,5,5,5,5,5,5,10,5,10,10,5,5,5,5,5,20,5,10,5,5,5,5,20,10,5,5,5,20,20,5,10,5,10,5,5,5,5,5,5,20,5,10,10,20,20,5,20,10,20,20,5,5,10,5,20,5,5,10,10,20,5,5,5,5,5,5,5,5,5,20,5,5,5,5,20,20,10,5,5,5,5,5,5,20,10,5,5,5,10,5,5,10,20,5,10,5,10,10,10,5,20,5,5,20,10,10,5,20,5,5,10,5,5,20,10,5,5,5,5,5,10,20,20,5,5,5,20,20,10,20,10,5,5,20,10,5,5,5,5,10,5,10,5,5,20,10,5,5,20,5,5,20,5,5,5,5,5,5,5,5,20,10,5,5,5,10,5,5,5,20,5,10,5,5,10,20,5,10,5,20,5,10,5,5,5,5,5,20,5,5,5,5,5,20,5,5,10,10,20,20,5,5,10,20,20,5,20,5,5,5,5,5,5,10,5,20,10,20,20,5,5,5,5,5,5,20,5,10,20,5,5,20,5,5,5,5,20,20,5,5,5,10,10,5,5,5,5,20,5,5,20,5,20,20,5,20,5,5,5,5,20,20,5,10,5,5,10,10,10,5,20,10,10,10,20,10,5,5,5,5,5,10,20,10,20,5,10,5,5,20,10,20,5,20,5,10,5,5,5,20,10,20,5,5,5,10,10,5,10,5,5,5,5,5,20,5,5,20,5,20,20,20,20,5,5,5,10,5,20,5,10,20,20,10,5,20,5,20,5,5,10,5,5,5,5,5,5,5,5,20,5,10,5,5,20,5,20,5,5,5,5,5,20,5,5,10,10,10,5,5,5,10,10,5,5,5,5,5,10,20,5,20,5,20,20,10,5,5,20,10,5,10,5,5,5,5,5,5,20,20,20,20,5,5,5,10,5,10,10,10,5,5,5,5,5,10,5,20,5,20,5,5,5,5,5,5,20,5,5,10,20,10,5,20,20,5,20,20,5,5,5,5,5,10,5,5,10,10,5,5,5,5,5,5,5,5,5,20,5,5,5,10,10,5,5,5,5,5,5,5,10,20,5,5,20,10,5,20,5,5,20,10,10,10,5,10,10,5,5,5,20,10,5,10,20,5,5,10,5,5,5,5,5,5,10,5,5,20,5,5,20,20,10,5,5,5,10,5,5,5,20,5,5,10,5,10,10,20,5,5,20,5,20,20,5,20,5,5,5,5,20,10,5,20,5,20,5,5,20,5,5,10,20,5,20,10,5,5,20,5,20,5,10,5,5,5,10,10,5,20,10,5,20,20,5,20,5,5,20,5,10,5,5,5,5,20,10,5,5,10,5,5,5,20,5,5,5,5,20,5,5,5,10,20,5,5,5,5,5,5,5,5,5,5,10,20,10,5,5,5,5,20,5,5,10,20,5,5,5,5,10,20,5,5,5,10,5,5,5,5,5,20,20,20,5,5,5,5,5,5,20,5,20,20,10,5,10,5,5,5,5,5,5,5,5,10,20,10,20,20,10,5,20,5,10,20,10,20,5,5,10,20,5,5,5,5,20,20,5,10,10,20,5,5,5,5,5,5,20,5,10,5,20,10,5,5,5,5,5,5,5,5,5,5,5,10,5,5,5,5,5,5,5,20,5,20,5,5,5,5,5,5,5,10,10,20,20,5,5,20,10,20,5,10,10,10,20,20,5,20,20,5,10,10,20,5,10,10,5,5,20,5,5,20,10,5,20,20,5,5,20,5,5,5,20,20,5,5,5,5,10,20,5,5,20,5,20,10,10,10,5,20,5,10,10,10,20,20,5,5,5,10,5,20,5,5,5,5,5,5,5,5,5,5,20,5,5,10,5,5,10,5,5,5,5,5,5,5,20,10,20,5,20,5,5,5,5,5,20,5,5,5,20,5,5,5,5,5,20,20,10,5,5,10,5,5,10,10,20,20,5,5,20,10,5,5,5,5,5,20,10,5,5,10,10,5,10,5,10,5,5,20,20,20,10,20,5,5,20,5,5,5,20,20,10,5,5,20,20,5,5,10,5,5,20,5,20,10,10,20,5,5,5,10,20,5,5,20,5,5,5,5,5,10,5,5,20,5,5,20,20,20,5,10,5,5,5,5,5,5,5,5,5,20,5,5,20,5,5,5,10,20,20,10,5,10,5,5,10,10,10,5,5,5,10,5,5,10,5,5,5,20,5,5,10,5,5,5,5,5,5,10,20,10,5,5,20,20,10,5,10,5,5,5,5,5,5,5,5,5,5,5,5,5,20,5,10,20,20,5,10,5,10,10,5,5,5,5,5,20,5,20,10,20,5,20,5,5,5,10,5,10,5,5,5,5,10,5,10,20,5,5,5,10,5,5,10,5,10,5,10,5,10,20,5,5,5,5,5,5,5,5,5,5,10,20,20,20,10,5,5,10,5,5,5,5,20,5,5,20,5,20,5,5,5,5,5,5,5,20,5,10,5,5,20,5,5,20,20,5,20,20,5,10,5,5,5,5,20,5,5,10,20,10,20,5,20,5,20,20,10,5,5,5,5,5,5,10,5,5,20,10,20,5,5,5,5,10,5,20,5,5,5,10,5,20,20,5,20,5,5,20,5,20,5,5,10,5,5,20,5,5,5,5,5,10,20,20,5,5,5,10,5,20,5,10,5,10,20,5,10,5,5,5,5,20,5,10,5,5,5,5,10,10,20,20,20,5,10,5,5,20,5,5,5,5,10,10,10,5,20,5,10,5,10,10,5,20,5,5,10,20,20,5,5,5,5,5,5,5,5,10,20,10,5,5,10,10,20,5,5,5,5,5,20,5,10,5,10,5,5,5,20,10,20,5,10,5,5,5,20,5,5,5,5,5,10,5,5,20,5,5,5,5,5,5,10,5,10,20,5,5,5,10,5,10,5,20,10,20,5,5,5,5,5,5,5,10,20,5,20,20,5,5,10,20,10,5,5,5,5,10,20,5,5,5,5,5,10,10,5,5,5,5,10,5,10,10,10,10,5,5,20,5,5,5,20,5,20,5,10,10,5,5,5,5,5,10,10,20,20,5,5,5,5,10,5,10,5,20,5,5,10,5,5,5,10,10,20,5,10,5,5,5,5,10,20,5,10,5,5,5,10,5,5,5,5,10,5,5,5,20,5,5,10,5,5,5,5,20,20,5,5,5,5,10,5,10,5,10,10,5,5,10,10,5,5,5,10,5,10,20,10,20,20,5,5,5,5,10,5,20,5,5,10,5,5,20,5,5,5,5,20,10,5,10,20,10,20,5,5,5,5,5,5,5,20,20,10,5,5,20,5,20,10,20,10,5,20,5,20,10,20,20,5,5,20,5,20,10,5,5,5,10,5,5,5,5,5,5,5,5,10,10,20,5,5,10,10,20,20,5,10,5,5,5,5,10,5,5,10,5,5,20,5,20,10,5,5,5,20,5,10,5,20,20,5,5,10,10,5,5,5,20,20,5,5,5,20,10,5,5,10,5,5,5,5,5,10,5,10,5,5,5,20,5,10,5,5,5,20,10,5,5,10,5,10,5,5,10,20,10,5,5,20,5,5,20,5,5,5,5,10,5,10,5,5,5,20,5,10,5,10,20,20,20,5,10,20,5,5,5,5,10,5,5,5,10,5,20,20,10,5,5,5,10,5,20,20,5,10,20,10,10,10,20,5,5,20,5,20,10,20,20,5,20,10,10,5,5,10,10,5,10,20,20,5,10,10,5,5,5,5,5,20,5,5,10,10,10,5,10,5,5,10,20,5,20,5,10,5,5,20,20,10,5,10,10,5,20,10,10,5,5,5,20,10,10,20,5,5,20,5,10,5,10,10,20,5,5,5,10,20,10,10,5,5,5,10,5,10,5,20,10,5,5,5,20,5,5,10,20,5,10,10,5,20,5,5,20,5,5,5,20,5,5,5,5,10,10,5,5,10,10,5,20,5,5,10,10,5,5,10,5,20,10,5,20,5,5,5,10,20,5,10,5,20,5,5,5,5,5,10,5,5,10,5,20,5,10,5,5,20,5,5,5,10,5,20,20,20,5,10,5,5,5,5,5,10,20,10,5,5,5,20,10,10,20,5,5,5,5,10,10,5,20,5,20,20,5,20,10,5,20,5,5,5,10,20,20,5,5,5,5,5,5,20,10,20,20,5,5,5,5,5,5,10,10,20,5,5,5,10,5,10,5,10,5,20,10,5,5,5,5,5,20,20,20,5,5,5,5,10,5,5,20,5,10,10,20,5,5,5,10,5,5,20,5,20,5,10,5,5,5,5,5,5,5,5,5,5,5,5,5,10,20,5,20,5,5,5,20,5,20,20,5,5,5,10,5,20,10,5,10,20,5,20,10,5,5,10,20,5,20,5,20,20,5,20,5,10,10,5,5,5,5,20,5,5,20,20,5,5,5,10,20,5,5,20,5,5,5,10,10,5,10,5,20,10,10,5,20,10,20,5,5,5,5,5,5,20,10,20,5,10,5,5,10,20,5,5,10,5,5,20,5,5,5,10,20,10,5,5,20,5,5,5,5,20,20,10,5,20,5,5,5,5,5,5,5,20,5,5,10,20,20,5,5,10,20,5,5,10,5,5,5,5,20,5,5,20,10,5,5,5,20,5,10,5,5,5,10,20,5,10,20,5,5,5,5,5,5,5,10,5,20,5,20,20,5,5,5,5,20,5,20,5,10,5,5,5,5,5,5,5,5,5,5,10,5,10,5,5,20,5,5,20,5,5,20,20,20,5,5,5,5,5,10,5,10,10,20,20,20,5,5,5,20,5,5,5,20,10,5,5,10,5,20,5,10,5,5,10,20,5,20,10,20,20,5,10,10,10,10,10,20,20,20,5,5,5,5,5,20,10,5,5,20,20,5,10,5,10,5,10,10,5,10,5,5,20,5,10,5,10,10,20,5,10,5,20,5,10,5,10,20,10,20,5,5,5,5,5,10,20,5,5,5,5,20,20,5,20,5,5,5,20,5,5,20,5,5,5,5,10,5,5,5,5,5,5,10,5,5,5,5,20,20,10,20,5,5,5,5,5,10,20,10,5,5,5,5,10,5,5,10,5,5,5,5,10,10,20,5,5,20,5,5,10,5,10,5,5,5,5,5,5,20,5,5,20,5,20,5,20,5,20,10,5,5,10,5,20,5,5,5,10,10,20,5,5,5,20,10,20,5,5,5,5,5,10,5,5,5,5,20,10,5,10,20,20,5,20,20,10,20,10,10,10,5,5,10,20,5,10,5,5,20,10,5,10,5,10,10,10,20,20,5,20,5,10,5,10,5,5,5,20,5,20,20,5,10,5,5,5,5,5,20,5,5,5,20,5,5,5,5,5,5,5,5,5,5,5,20,5,5,5,10,5,5,20,5,5,10,20,10,10,10,5,10,5,5,10,5,5,5,10,5,5,5,20,20,5,20,5,5,5,20,5,20,5,5,5,20,5,20,20,5,5,10,20,20,5,5,5,20,5,5,20,5,5,20,5,20,10,5,5,5,5,20,10,20,10,20,10,5,5,10,5,5,5,5,5,5,5,5,5,5,10,10,5,20,20,5,20,20,5,10,10,5,5,5,5,5,5,10,20,20,5,5,5,20,5,5,5,5,10,5,5,20,5,5,20,20,20,10,20,5,5,5,10,5,5,20,5,20,20,5,10,20,5,5,10,5,10,5,5,5,5,5,5,5,10,10,5,5,5,5,20,5,5,10,20,5,10,5,10,5,10,20,5,5,5,5,5,10,20,5,10,10,10,5,5,5,5,10,20,20,5,20,20,5,10,5,5,5,10,20,10,5,5,5,5,5,5,5,20,20,5,5,5,5,5,10,5,20,5,20,10,5,10,5,5,5,10,5,10,5,20,5,5,10,5,20,5,5,5,10,5,20,20,20,10,5,10,10,10,5,5,5,5,20,5,20,10,5,5,5,5,5,5,10,5,20,20,10,10,20,5,5,5,10,10,5,20,5,10,20,20,5,20,5,5,5,5,5,10,5,5,5,10,5,10,5,20,5,10,10,10,5,5,10,5,10,5,5,20,5,5,5,5,5,5,10,5,5,10,10,5,20,20,5,5,5,20,5,20,20,5,20,10,10,10,5,5,10,20,10,5,5,20,5,5,10,5,20,5,5,5,5,5,20,5,5,20,10,5,5,5,5,10,5,5,5,20,5,5,20,10,10,5,10,10,5,20,10,20,10,10,10,5,5,10,5,5,5,10,5,5,5,5,5,5,5,5,5,5,20,5,10,5,5,5,5,5,5,5,20,20,20,5,5,5,10,10,5,5,20,20,5,5,5,20,10,20,5,5,20,5,5,20,10,20,5,5,20,10,10,20,20,5,5,20,20,5,5,20,5,5,5,5,5,10,5,5,20,5,5,20,20,5,20,5,10,5,5,20,5,20,10,5,5,5,5,5,5,10,5,5,5,20,5,5,10,20,10,5,5,20,10,10,20,20,5,10,10,20,20,5,5,20,20,5,10,5,5,5,5,5,5,5,5,5,10,20,5,5,5,5,20,10,10,20,20,5,5,20,10,5,5,10,5,5,20,10,5,20,5,10,10,5,5,10,20,5,20,5,5,20,5,5,10,5,5,10,5,5,10,5,5,5,5,5,10,5,5,20,20,20,5,5,5,5,5,5,10,5,20,10,5,10,20,5,5,5,10,10,20,5,10,10,10,10,5,5,20,5,5,5,10,5,5,10,10,20,5,5,10,10,20,10,5,5,5,5,20,20,5,20,5,20,5,10,5,5,5,5,5,5,5,20,5,5,5,5,10,5,20,10,5,5,20,5,20,10,5,5,5,5,20,5,20,10,5,5,5,10,20,5,10,10,5,5,5,5,10,5,20,5,5,5,20,10,5,10,5,10,5,5,10,5,5,5,5,5,10,5,20,5,10,5,20,20,5,5,5,5,10,5,10,5,5,20,5,10,5,10,5,5,20,5,10,5,20,20,5,20,5,20,5,5,5,5,20,10,5,5,5,5,10,5,10,10,20,20,5,5,5,10,5,20,5,10,10,5,5,20,5,5,5,5,10,10,10,10,10,20,5,10,5,20,5,10,20,10,10,5,5,5,5,5,10,5,5,5,5,10,5,10,10,20,5,5,5,5,20,5,20,20,20,5,5,5,5,5,10,5,5,5,20,5,5,5,5,20,20,5,10,10,5,5,20,20,5,10,5,10,10,5,10,20,20,5,10,20,10,20,5,5,5,10,20,5,10,5,5,5,20,5,10,5,5,5,5,20,10,10,5,5,5,10,5,20,5,5,5,5,5,10,5,5,5,5,5,5,10,10,5,10,5,10,5,5,5,5,5,20,10,5,5,20,10,20,5,10,20,10,5,5,5,5,20,10,20,5,10,10,5,10,20,5,20,5,20,5,5,5,5,5,5,10,5,5,5,5,5,5,5,10,20,10,20,5,20,5,5,10,20,5,5,5,5,20,20,20,10,5,5,5,5,20,5,5,5,5,5,10,5,20,5,5,10,20,5,20,5,5,5,5,20,10,10,5,10,10,5,5,5,10,20,20,20,5,5,5,10,5,5,20,5,10,10,5,10,5,5,10,5,10,5,5,5,20,10,10,20,5,20,5,5,5,10,5,10,5,5,20,5,10,5,20,5,20,5,10,5,5,5,5,10,5,5,5,5,5,5,5,5,5,5,20,20,5,10,5,5,20,5,20,10,10,20,5,5,5,5,5,5,5,5,20,5,5,5,5,5,5,5,5,20,5,5,5,20,5,5,5,20,5,5,20,20,5,5,5,20,10,5,5,20,5,5,5,5,5,5,20,10,5,5,5,5,10,5,5,5,20,5,5,20,5,10,5,5,10,20,10,5,20,5,5,5,10,20,10,5,10,5,5,5,5,5,20,20,20,20,5,20,20,5,5,5,10,10,5,20,5,20,5,5,5,20,10,5,5,5,20,10,5,20,5,20,20,5,5,10,5,5,5,5,5,5,10,20,10,20,5,5,10,5,20,5,5,10,10,5,5,5,20,10,10,5,5,10,5,5,5,20,5,20,5,5,20,5,20,10,20,20,5,5,10,5,5,20,5,10,5,5,5,10,5,5,5,5,5,5,5,10,5,5,5,5,20,5,5,5,5,5,5,20,10,5,10,5,5,5,20,20,10,5,5,5,5,20,5,5,10,10,5,5,10,10,5,10,5,5,10,10,5,5,5,20,10,10,5,10,5,5,20,5,5,20,5,5,10,20,5,10,5,5,5,5,5,5,5,5,20,5,20,5,10,5,5,10,5,5,5,10,5,5,10,10,10,5,5,20,20,5,5,5,5,20,5,5,5,5,10,20,5,10,10,5,5,20,20,5,5,5,5,5,20,20,10,20,20,10,10,5,20,20,5,5,20,10,10,20,5,5,5,5,5,5,20,5,5,10,20,5,5,5,5,5,20,10,10,5,5,5,5,5,10,5,20,5,5,5,20,10,10,10,5,10,5,5,5,20,5,10,20,20,5,5,5,5,20,10,10,10,20,5,5,20,5,5,5,5,5,10,5,20,5,10,5,20,5,5,20,10,20,5,5,10,5,5,5,5,5,5,5,5,20,20,5,5,20,5,10,10,5,5,10,10,20,5,5,20,10,10,20,5,20,5,5,10,5,10,5,20,10,5,5,10,10,5,5,5,5,20,5,10,5,10,5,10,20,5,5,10,20,5,10,5,5,5,10,5,5,10,5,10,10,5,20,10,5,5,5,20,5,10,5,5,5,5,5,20,5,20,20,5,20,5,5,10,5,20,5,5,20,20,20,20,10,5,10,5,5,20,10,5,5,10,5,5,5,5,5,10,5,5,5,5,5,5,5,5,5,10,5,5,5,5,10,10,5,5,5,5,5,5,5,10,5,5,5,5,5,10,5,5,20,10,20,10,10,20,20,5,5,10,5,5,5,10,5,10,5,5,10,5,5,5,5,10,10,5,10,5,20,5,20,5,5,5,5,5,20,5,10,20,5,20,10,5,5,5,5,10,10,20,10,20,5,10,5,20,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,20,5,5,5,10,20,5,20,5,5,5,5,10,5,5,5,5,5,10,10,10,20,10,10,20,5,5,20,5,10,5,5,5,5,5,5,5,20,10,5,20,5,10,20,10,20,5,5,5,5,5,5,20,5,5,20,20,5,10,5,5,10,5,5,20,5,5,5,20,5,20,10,5,5,5,10,10,20,5,10,10,5,20,10,5,5,10,20,20,5,5,5,5,10,5,5,10,20,5,10,5,10,5,5,10,5,20,5,10,5,20,20,10,5,20,10,5,5,5,10,10,10,20,20,5,20,10,5,5,5,5,5,20,5,10,5,5,10,10,5,10,5,5,10,20,5,5,5,5,5,5,10,5,20,10,20,20,5,5,5,10,5,20,5,5,5,5,5,5,5,5,20,10,5,5,20,5,5,20,5,20,5,5,5,10,5,5,5,5,5,5,5,5,10,5,5,10,5,20,10,5,20,5,5,10,5,5,20,5,5,10,5,20,5,5,10,5,20,5,10,5,20,20,5,5,5,20,20,5,5,5,20,5,5,20,10,20,5,5,5,10,5,5,5,5,10,5,5,5,20,20,5,5,5,20,5,10,10,10,5,5,5,5,20,5,5,10,5,20,5,5,5,5,5,5,5,10,5,5,5,20,5,5,10,5,5,5,5,5,5,20,5,5,5,5,5,10,20,5,5,20,5,20,5,5,20,10,5,5,5,20,10,5,20,20,5,5,5,5,20,20,5,5,5,5,5,20,5,10,10,5,20,5,10,5,5,10,5,20,20,5,5,20,5,10,5,5,20,5,10,10,5,5,5,5,5,5,5,5,20,20,5,20,20,5,5,5,5,5,5,10,5,5,5,5,5,5,10,5,5,20,5,5,5,20,5,5,20,20,5,5,5,10,5,10,20,5,5,5,5,10,5,5,10,5,5,10,5,5,20,5,5,5,5,5,5,5,10,5,5,20,5,5,10,5,5,5,5,5,5,5,5,20,10,5,5,5,5,5,5,20,10,5,10,5,10,5,10,20,20,20,10,5,5,10,5,10,5,5,5,5,5,5,5,5,10,5,10,5,5,5,5,10,10,20,20,5,5,20,5,5,10,20,20,10,5,5,5,5,5,5,20,5,5,10,20,20,10,5,5,5,5,5,5,5,20,10,5,5,10,5,5,5,10,5,5,20,20,5,5,5,5,20,5,20,5,5,5,5,5,5,10,5,5,5,5,5,5,5,5,5,5,20,5,10,20,20,20,10,5,5,5,5,10,5,5,20,20,5,20,5,10,5,5,5,5,5,5,20,10,5,5,5,5,5,5,5,5,5,5,20,5,5,5,5,5,20,5,5,20,10,10,5,5,5,5,5,5,20,10,5,20,5,20,5,5,5,5,5,10,5,5,20,20,5,10,20,5,10,5,20,5,5,5,5,5,5,10,20,5,5,5,10,10,5,20,5,5,10,5,5,10,10,5,5,20,10,5,5,20,10,10,5,5,20,5,5,5,20,5,10,10,5,5,5,5,5,5,5,20,10,20,20,5,20,5,5,5,5,5,5,5,20,10,10,5,5,5,5,20,5,5,20,5,10,5,5,5,10,20,10,5,20,20,10,20,10,20,10,5,5,5,5,5,10,10,5,5,5,5,10,10,5,5,5,5,5,5,5,5,5,10,5,10,5,5,20,20,10,5,5,20,5,5,5,5,5,5,5,5,20,20,5,10,20,10,5,10,5,20,5,5,10,5,10,20,5,5,5,20,5,5,5,5,10,5,20,20,5,5,20,20,10,20,20,10,5,5,5,5,10,10,5,20,10,5,5,20,5,5,5,5,5,5,5,5,10,5,5,20,5,20,5,5,5,20,5,5,10,20,5,10,5,5,10,20,5,5,10,5,5,20,5,5,10,10,5,5,5,5,5,5,5,5,5,5,20,5,5,10,10,20,5,5,10,5,5,5,20,5,20,5,20,5,5,10,5,20,5,5,5,5,5,5,5,10,5,10,5,20,5,20,5,10,5,5,5,5,10,5,5,5,10,5,20,5,5,5,5,5,20,5,5,5,5,10,5,5,10,10,10,20,5,5,20,20,5,5,5,5,5,5,5,5,5,20,10,5,10,20,5,5,5,5,5,5,20,5,20,5,10,10,5,5,5,20,5,5,5,5,5,5,10,10,5,5,5,5,5,5,20,5,5,5,5,20,5,5,20,5,10,20,5,10,10,5,5,5,5,20,10,5,5,5,5,20,20,20,5,5,5,10,5,5,5,5,10,5,5,5,20,20,5,20,5,5,10,5,5,5,5,20,10,5,10,5,5,5,5,5,5,5,20,5,10,5,10,5,5,5,5,20,20,5,5,5,20,5,5,5,20,5,10,5,5,10,5,5,5,5,5,10,20,5,10,10,5,5,10,5,5,5,10,20,5,20,5,10,5,5,10,5,5,5,5,5,5,5,5,5,5,20,5,5,5,5,5,5,5,5,10,20,10,20,5,10,20,5,5,10,5,5,5,5,10,5,10,20,5,5,20,10,5,20,20,5,5,5,5,5,5,5,5,5,10,5,5,5,20,5,20,20,5,5,5,5,10,5,20,5,20,5,5,5,20,5,20,5,5,20,10,5,10,5,5,10,5,5,5,5,5,5,5,10,10,10,20,10,5,5,10,5,20,5,20,5,20,5,5,5,5,10,5,5,10,5,5,5,5,5,5,20,5,20,5,5,5,20,5,20,20,20,5,5,5,20,5,10,20,5,10,20,20,5,5,5,20,5,5,5,5,10,5,20,20,5,5,5,20,10,5,5,20,5,20,5,5,20,20,5,10,5,5,20,10,20,10,10,20,5,5,10,10,20,10,5,5,5,10,20,5,5,20,5,20,5,10,5,5,20,20,5,5,5,5,5,5,5,10,20,5,5,5,20,5,5,20,5,20,5,20,5,5,10,5,5,10,10,5,5,5,5,5,20,10,10,5,5,5,20,10,5,5,5,5,20,20,5,10,10,5,5,5,10,5,5,10,20,20,5,5,10,10,10,5,5,5,5,5,20,10,5,5,5,20,20,20,20,20,5,5,5,20,10,20,20,5,5,5,10,20,5,10,10,5,10,5,5,10,5,10,20,5,5,10,5,20,5,5,20,5,5,5,20,5,5,5,5,10,20,10,10,5,5,10,5,5,5,10,5,5,20,20,20,20,5,5,20,5,5,5,5,5,5,5,5,5,5,5,5,20,5,5,20,20,10,20,5,20,10,10,5,5,10,5,5,20,5,20,5,10,5,10,5,5,10,10,20,20,20,5,10,5,10,5,20,10,5,5,5,20,20,20,20,5,5,5,5,10,5,5,5,5,20,5,5,10,10,20,5,5,10,5,10,5,5,20,10,20,5,5,5,10,5,5,20,5,5,20,10,5,5,10,10,5,10,5,5,5,20,10,5,10,20,5,5,5,5,5,20,5,5,5,20,5,5,5,20,10,5,20,10,10,20,5,5,5,5,5,5,5,5,5,10,5,5,5,5,5,5,20,5,5,5,5,5,5,20,5,5,5,20,5,20,5,20,20,10,5,10,20,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,20,5,5,5,20,5,5,20,5,5,5,5,20,5,20,10,5,5,5,5,5,5,5,5,5,20,5,5,20,20,5,5,5,5,5,5,5,5,5,5,20,5,5,5,20,5,20,10,5,20,5,5,5,20,20,5,10,5,10,5,10,10,10,5,5,5,5,5,5,5,5,10,10,5,10,5,20,10,5,5,5,5,5,5,10,5,5,20,5,10,5,5,20,5,10,5,5,20,5,20,5,5,20,20,20,5,5,20,5,20,5,20,5,5,20,5,5,5,5,10,5,5,5,10,5,10,10,5,5,5,5,5,5,5,20,10,5,5,5,20,5,20,5,5,20,5,5,5,5,5,5,20,5,5,20,20,5,5,5,10,5,5,5,10,5,20,5,5,20,5,5,5,5,10,5,10,5,10,10,5,5,10,5,20,20,10,5,10,10,20,5,10,5,5,5,10,5,10,5,5,5,10,5,20,5,5,5,10,20,20,5,5,10,5,20,5,20,5,10,5,10,5,5,5,5,10,5,5,5,5,5,5,20,5,5,5,5,5,20,5,5,10,5,5,5,5,5,10,5,20,5,5,20,5,20,5,5,20,5,20,5,5,10,5,5,5,5,5,5,20,20,5,10,5,10,5,5,5,10,5,5,5,20,5,5,5,10,5,5,5,10,10,5,20,5,5,10,5,5,5,20,5,5,10,5,10,5,10,5,5,5,5,5,20,10,10,5,20,5,5,5,10,10,5,5,5,10,10,5,5,20,5,5,5,5,5,5,5,10,5,20,10,20,5,5,5,5,5,5,20,10,5,20,20,10,5,5,10,10,10,5,10,5,10,20,20,20,20,10,5,5,20,20,20,5,20,20,5,5,5,5,5,10,5,5,5,5,10,20,5,10,10,5,5,5,5,10,5,5,5,5,20,10,5,5,5,20,20,5,10,5,10,5,20,5,5,5,10,5,5,10,20,5,5,20,5,5,10,5,20,5,10,5,10,10,10,10,5,5,20,5,20,20,5,20,20,5,10,20,5,5,5,5,5,5,5,20,20,5,10,10,10,5,5,5,10,5,5,5,20,5,5,5,10,20,5,10,20,10,20,10,5,5,5,5,10,10,5,5,20,20,20,5,20,20,5,5,20,5,10,5,10,5,5,5,5,5,5,5,20,5,10,10,5,20,10,5,5,5,5,5,5,10,5,5,5,20,5,5,5,5,5,20,20,5,5,5,5,10,20,10,5,5,20,20,10,20,20,20,5,10,20,5,5,10,10,20,10,10,5,5,20,5,5,5,20,5,5,5,5,20,10,5,10,5,10,10,10,10,5,5,5,20,5,5,5,5,5,5,5,20,5,20,5,10,10,10,5,5,5,10,5,5,20,20,5,5,20,5,10,10,20,20,5,5,10,10,5,5,20,5,5,5,5,10,20,5,5,5,10,20,5,5,20,5,5,5,5,10,10,5,5,20,5,5,5,20,5,5,5,5,5,5,5,20,20,5,5,5,5,20,20,20,10,5,5,5,5,10,20,5,20,20,20,5,5,5,5,10,20,5,5,5,5,5,5,5,20,5,5,5,10,20,20,5,5,5,5,20,5,20,5,5,5,5,5,5,10,10,10,5,20,10,5,5,20,20,5,20,10,5,10,5,20,20,5,10,5,5,5,5,5,5,5,5,5,20,20,5,20,20,5,20,10,10,20,5,5,20,5,5,5,5,10,5,5,5,10,5,5,10,10,20,10,5,5,5,5,5,10,5,5,5,5,10,5,10,5,5,5,5,5,5,5,5,10,10,5,5,10,5,10,10,5,5,20,20,10,10,5,5,20,20,5,5,5,5,5,10,20,10}));
//        System.out.println(Arrays.toString(new FlowerBed().diStringMatch("IDID")));
//        System.out.println(Arrays.toString(new FlowerBed().diStringMatch("III")));
//        System.out.println(Arrays.toString(new FlowerBed().diStringMatch("DDI")));
//        System.out.println(new FlowerBed().largestSumAfterKNegations(new int[] {4,2,3},1));
//        System.out.println(new FlowerBed().largestSumAfterKNegations(new int[] {3,-1,0,2},3));
//        System.out.println(new FlowerBed().largestSumAfterKNegations(new int[] {2,-3,-1,5,-4},2));
//        System.out.println(Arrays.toString(new FlowerBed().maxSubsequence(new int[] {2,1,3,3},2)));
//        System.out.println(Arrays.toString(new FlowerBed().sortByBits(new int[] {0,1,2,3,4,5,6,7,8})));
//        System.out.println(new FlowerBed().isHappy(2));
//        System.out.println(new FlowerBed().lastStoneWeight(new int[] {2,7,4,1,8,1}));
        System.out.println(new FlowerBed().lastStoneWeight(new int[] {1}));
    }

    public int lastStoneWeight(int[] stones) {
        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());

        for(int stone : stones) {
            pq.add(stone);
        }

        while (pq.size() != 1) {
            int stone1 = pq.poll();
            int stone2 = pq.poll();

            pq.add(Math.abs(stone1 - stone2));
        }

        return pq.size() == 1 ? pq.poll() : 0;
    }

    public boolean isHappy(int n) {
        int sum = 0;
        Set<Integer> integers = new HashSet<>();
        while (sum != 1) {
            sum = getNumSquareSum(n);
            n = sum;

            if(integers.contains(sum)) {
                return false;
            }
            integers.add(sum);
        }

        return true;
    }

    private int getNumSquareSum(int n) {
        int sum = 0;

        sum = Arrays.stream(String.valueOf(n).split("")).mapToInt(i -> Integer.parseInt(i) * Integer.parseInt(i)).sum();

        return sum;
    }

    public int reverseBits(int n) {
        return Integer.parseInt(Integer.toBinaryString(n).replace('0','X').replace('1', '0').replace('X','1'), 10);
    }

    public int[] sortByBits(int[] arr) {
        Comparator<Integer> integerComparator = new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                if(Integer.bitCount(o1) > Integer.bitCount(o2)) {
                    return 1;
                } else if(Integer.bitCount(o1)  < Integer.bitCount(o2)) {
                    return -1;
                } else {
                    return o1.compareTo(o2);
                }
            }
        };

        List<Integer> pq = new ArrayList<>();
        for (int i = 0; i < arr.length; ++i) {
            pq.add(arr[i]);
        }
        Collections.sort(pq, integerComparator);
        return pq.stream().mapToInt(i->i).toArray();
    }

    public int[] maxSubsequence(int[] nums, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<>
                (Comparator.comparingInt(i -> nums[i]));
        for (int i = 0; i < nums.length; ++i) {
            pq.offer(i);
            if (pq.size() > k) {
                pq.poll();
            }
        }
        return pq.stream().sorted().mapToInt(i->nums[i]).toArray();
    }

    public int largestSumAfterKNegations(int[] nums, int k) {
        PriorityQueue<Integer> queue = new PriorityQueue<>();
        for(int i : nums) {
            queue.add(i);
        }

        while(k > 0) {
            queue.add(-queue.poll());
            k--;
        }

        int sum = 0;
        for(int i : nums) {
            sum += queue.poll();
        }

        return sum;
    }

    public int[] diStringMatch(String s) {
        int[] output = new int[s.length()+1];

        int i = 0;
        int d = s.length();
        int ii = 0;

        while(i <= d) {
            if( i == d) {
                output[ii] = i;
                i++;
            } else if(s.charAt(ii) == 'I') {
                output[ii] = i;
                i++;
                ii++;
            } else {
                output[ii] = d;
                d--;
                ii++;
            }
        }


        return output;
    }

    public boolean lemonadeChange(int[] bills) {
        Stack<Integer> fiveChange   = new Stack<>();
        Stack<Integer> tenChange    = new Stack<>();
        Stack<Integer> tweentyChange    = new Stack<>();

        for (int i = 0; i < bills.length; i++) {
            System.out.println(i);
            int currentBill = bills[i];

            if(currentBill == 5) {
                fiveChange.push(5);
                continue;
            }

            if(currentBill == 10) {
                if(!fiveChange.isEmpty()) {
                    fiveChange.pop();
                    tenChange.push(10);
                    continue;
                } else {
                    return false;
                }
            }

            if(currentBill == 20) {
                if(fiveChange.isEmpty()) {
                   return false;
                } else {
                    fiveChange.pop();
                    currentBill = currentBill - 5;

                    if(tenChange.isEmpty()) {
                        int change = currentBill - 5;

                        while (!fiveChange.isEmpty() && change != 0) {
                            fiveChange.pop();
                            change -= 5;
                        }
                        if (change == 0) continue;

                        return false;
                    } else {
                        tenChange.pop();
                        tweentyChange.push(20);
                        continue;
                    }
                }
            }
        }

        return true;
    }

    public int[] findErrorNums(int[] nums) {
        int[] ans = new int[2];
        int[] counter = new int[nums.length];

        for(int i = 0; i < nums.length; i++) {
            counter[nums[i] - 1]++;
        }

        for(int i = 0; i < counter.length; i++) {
            if(counter[i] == 0) {
                ans[1] = i+1;
            }

            if(counter[i] > 1) {
                ans[0] = i+1;
            }
        }

        return ans;
    }

    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int counter = 0;

        while(counter < flowerbed.length) {
            if(checkAdj(counter, flowerbed)) {
                flowerbed[counter] = 1;
                n--;
            }
            counter++;
        }

        return n < 1;
    }

    private boolean checkAdj(int index, int[] flowerbed) {
        if(flowerbed.length == 1 && flowerbed[index] != 1) {
            return false;
        }

        if((index - 1 < 0) && flowerbed[index] == 0 && (index + 1) < flowerbed.length && flowerbed[index+1] == 0) {
            return true;
        }

        if(!(index - 1 < 0) && flowerbed[index] == 0 && flowerbed[index-1] == 0 && (index + 1) < flowerbed.length && flowerbed[index+1] == 0) {
            return true;
        }

        if(index == flowerbed.length -1 && flowerbed[index] == 0 && flowerbed[index - 1] == 0) {
            return true;
        }

        return false;
    }
}
